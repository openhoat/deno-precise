scripts:
  bench:
    desc: Run a benchmark test
    cmd: npx artillery@2.0.0-27 run --quiet --output dist/bench.json bench/scenario1.yaml
  'bench:report':
    desc: Create a benchmark HTML report
    cmd:
      - npx artillery@2.0.0-27 report dist/bench.json
      - xdg-open dist/bench.json.html
  clean:
    desc: Clean the dist folder
    cmd: npx rimraf dist
  'clean:coverage':
    desc: Clean the dist/coverage folder
    cmd: npx rimraf dist/coverage
  'cover:lcov':
    desc: Run the tests coverage
    cmd:
      - vr test --coverage=dist/coverage
      - deno coverage --include=src/main --lcov dist/coverage --output=dist/coverage/lcov.info
    env:
      PORT: 8999
  cover:
    desc: Run the tests coverage and build the HTML report
    cmd:
      - vr clean:coverage
      - vr cover:lcov
      - genhtml -o dist/coverage/html dist/coverage/lcov.info
  'cover:open':
    desc: Open the tests coverage HTML report
    cmd:
      - npx opener dist/coverage/html/index.html
  'demo':
    desc: Start the demo server
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
  'demo:production':
    desc: Start the server in production mode
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    cachedOnly: true
  'demo:reload':
    desc: Reload dependencies and start the server
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    reload: true
  'demo:watch':
    desc: Start the server in watch mode
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
    watch: true
  'deps:update':
    desc: Update the Deno dependencies
    cmd:
      - >
        udd
        demo/deps/std.ts
        demo/deps/x/optic.ts
        src/main/deps/std.ts
        src/main/deps/x/accepts.ts
        src/main/deps/x/camelcase.ts
        src/main/deps/x/free_port.ts
        src/main/deps/x/mimetypes.ts
        src/main/deps/x/optic.ts
        src/test/deps/std.ts
        src/test/deps/x/tincan.ts
  'format:check':
    cmd: npx prettier --check .
    desc: Format the project sources
  'format:check:watch':
    cmd: npx prettier --check .
    desc: Format the project sources
    watch: true
  'format:fix':
    cmd: npx prettier --write .
    desc: Format the project sources
  'git:commitlint':
    cmd: npx commitlint -e ${GIT_ARGS[1]}
    desc: Checks commit messages format
    gitHook: commit-msg
  'git:pre-commit':
    cmd:
      - vr lint
      - vr format:check
    desc: Checks sources before commit
    gitHook: pre-commit
  install:
    desc: Install all the tools used in the project
    cmd:
      - deno install -qAfn vr https://deno.land/x/velociraptor@1.5.0/cli.ts
      - deno install -qAfn udd https://deno.land/x/udd@0.5.0/main.ts
  lint:
    cmd: deno lint
    desc: Lint the project sources
  'lint:watch':
    cmd: deno lint
    desc: Lint the project sources
    watch: true
  'sonar:scan':
    desc: Run a SonarQube scan
    cmd:
      - >
        docker run --rm
        -e SONAR_HOST_URL
        -e SONAR_LOGIN
        -e SONAR_SCANNER_OPTS="-Dsonar.projectBaseDir=${PWD} -Dsonar.projectVersion=$(echo "import version from './version.json' assert { type: 'json' };console.log(version)" | deno run - )"
        -v "${PWD}:${PWD}"
        sonarsource/sonar-scanner-cli
  test:
    desc: Run the tests
    cmd: deno test ./src/test
    allow:
      - net
      - read
      - env
    env:
      PORT: 8999
  'test:watch':
    desc: Run the tests in watch mode
    cmd: deno test ./src/test
    allow:
      - net
      - read
      - env
    watch: true
    env:
      PORT: 8999
  validate:
    desc: Validate the project
    cmd:
      - vr clean
      - vr lint
      - vr format:check
      - vr cover
  'validate:watch':
    desc: Validate the project in watch mode
    cmd:
      - vr clean
      - pll:
          - vr lint:watch
          - vr format:check:watch
          - vr test:watch
  version:
    desc: Get the current version
    cmd:
      - |
        (cat <<END
        import version from './version.json' assert { type: 'json' }
        console.log(version)
        END
        ) | deno run -
  'version:init':
    desc: Init version.json with the latest Git tag
    cmd:
      - echo "\"$(git describe --tags --abbrev=0)\"" > version.json
  'version:update:major':
    desc: Increase patch version in version.json
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ Number(major) + 1, minor, patch ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - vr version
  'version:update:minor':
    desc: Increase patch version in version.json
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ major, Number(minor) + 1, patch ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - vr version
  'version:update:patch':
    desc: Increase patch version in version.json
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ major, minor, Number(patch) + 1 ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - vr version
