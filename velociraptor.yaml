scripts:
  bench:
    desc: Run a benchmark test.
    cmd: npx artillery@2.0.0-27 run --quiet --output dist/bench.json bench/scenario1.yaml
  "bench:report":
    desc: Create a benchmark HTML report.
    cmd:
      - npx artillery@2.0.0-27 report dist/bench.json
      - npx opener dist/bench.json.html
  check:
    desc: Check sources types.
    cmd: deno check mod.ts
  "check:watch":
    desc: Check sources types in watch mode.
    cmd: deno check mod.ts
    watch: true
  clean:
    desc: Clean the dist folder.
    cmd: .deno/bin/fs_cli rm dist
  "clean:coverage":
    desc: Clean the dist/coverage folder.
    cmd: .deno/bin/fs_cli rm dist/coverage
  "clean:install":
    desc: Clean the local deno install folder.
    cmd: .deno/bin/fs_cli rm .deno/bin
  cover:
    desc: Run the tests coverage.
    cmd:
      - .deno/bin/vr clean:coverage
      - .deno/bin/vr test --coverage=dist/coverage
      - deno coverage --include="^file://${PWD}/lib/" --lcov --output=dist/coverage/coverage.lcov dist/coverage
  "cover:html":
    desc: Run the tests coverage with HTML report.
    cmd:
      - .deno/bin/vr cover
      - genhtml -o dist/coverage/html dist/coverage/coverage.lcov
  "cover:open":
    desc: Open the tests coverage HTML report.
    cmd:
      - npx opener dist/coverage/html/index.html
  "demo":
    desc: Start the demo server.
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
  "demo:production":
    desc: Start the server in production mode.
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    cachedOnly: true
  "demo:reload":
    desc: Reload dependencies and start the server.
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    reload: true
  "demo:watch":
    desc: Start the server in watch mode.
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
    watch: true
  "deps:update":
    desc: Update the Deno dependencies.
    cmd: .deno/bin/udd $(find . \( -path "./demo/*" -or -path "./lib/*" \) -path "*/deps/*" -type f -name "*.ts")
  "format":
    desc: Check for project sources format.
    cmd: deno fmt --check
  "format:fix":
    desc: Format the project sources.
    cmd: deno fmt
  "git:commitlint":
    desc: Checks commit messages format.
    cmd: npx commitlint -e ${GIT_ARGS[1]}
    gitHook: commit-msg
  "git:pre-commit":
    desc: Checks sources before commit.
    cmd:
      - .deno/bin/vr lint
      - .deno/bin/vr format
    gitHook: pre-commit
  install:
    desc: Install all the tools used in the project.
    cmd:
      - deno install --root .deno --unstable --allow-read --allow-write --allow-env --allow-run -qfn fs_cli https://deno.land/x/fs_cli@v1.0.0/cli.ts
      - deno install --root .deno --allow-read -qfn udd https://deno.land/x/udd@0.5.0/main.ts
  lint:
    desc: Lint the project sources.
    cmd: deno lint
  "lint:watch":
    desc: Lint the project sources in watch mode.
    cmd: deno lint
    watch: true
  "sonar:scan":
    desc: Run a SonarQube scan.
    cmd:
      - >
        docker run --rm
        -e SONAR_HOST_URL
        -e SONAR_LOGIN
        -e SONAR_SCANNER_OPTS="-Dsonar.projectBaseDir=${PWD} -Dsonar.working.directory=${PWD}/dist/sonar -Dsonar.projectVersion=$(echo "import version from './version.json' assert { type: 'json' };console.log(version)" | deno run - )"
        -v "${PWD}:${PWD}"
        -u $(id -u "${USER}"):$(id -g "${USER}")
        sonarsource/sonar-scanner-cli
  test:
    desc: Run the tests.
    cmd: deno test ./test
    allow:
      - net
      - read
      - env
  "test:watch":
    desc: Run the tests in watch mode.
    cmd: deno test ./test
    allow:
      - net
      - read
      - env
    watch: true
  validate:
    desc: Validate the project.
    cmd:
      - .deno/bin/vr clean
      - .deno/bin/vr format
      - .deno/bin/vr check
      - .deno/bin/vr lint
      - .deno/bin/vr cover
  "validate:watch":
    desc: Validate the project in watch mode.
    cmd:
      - .deno/bin/vr clean
      - pll:
          - .deno/bin/vr check:watch
          - .deno/bin/vr lint:watch
          - .deno/bin/vr test:watch
  version:
    desc: Get the current version.
    cmd:
      - |
        (cat <<END
        import version from './version.json' assert { type: 'json' }
        console.log(version)
        END
        ) | deno run -
  "version:init":
    desc: Init version.json with the latest Git tag.
    cmd:
      - echo "\"$(git describe --tags --abbrev=0)\"" > version.json
  "version:update:major":
    desc: Increase patch version in version.json.
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ Number(major) + 1, minor, patch ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - .deno/bin/vr version
  "version:update:minor":
    desc: Increase patch version in version.json.
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ major, Number(minor) + 1, patch ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - .deno/bin/vr version
  "version:update:patch":
    desc: Increase patch version in version.json.
    cmd:
      - |
        VERSION=$((cat <<END
        import version from './version.json' assert { type: 'json' }
        const [ major, minor, patch] = version.split('.')
        const newVersion = [ major, minor, Number(patch) + 1 ].join('.')
        console.log(['', newVersion, ''].join('"'))
        END
        ) | deno run -); echo $VERSION > ./version.json
      - .deno/bin/vr version
