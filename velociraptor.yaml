scripts:
  clean:
    desc: Clean the dist folder
    cmd: npx rimraf dist
  'cover:lcov':
    desc: Run the tests coverage
    cmd:
      - vr test --coverage=dist/coverage
      - deno coverage --include=src/main --lcov dist/coverage --output=dist/coverage/lcov.info
    env:
      PORT: 8999
  cover:
    desc: Run the tests coverage and build the HTML report
    cmd:
      - vr cover:lcov
      - genhtml -o dist/coverage/html dist/coverage/lcov.info
  'cover:open':
    desc: Open the tests coverage HTML report
    cmd:
      - npx opener dist/coverage/html/index.html
  'demo':
    desc: Start the demo server
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
  'demo:production':
    desc: Start the server in production mode
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    cachedOnly: true
  'demo:reload':
    desc: Reload dependencies and start the server
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
    reload: true
  'demo:watch':
    desc: Start the server in watch mode
    cmd: demo/index.ts
    allow:
      - net
      - read
      - env
      - run
    watch: true
  'format:check':
    cmd: npx prettier --check .
    desc: Format the project sources
  'format:check:watch':
    cmd: npx prettier --check .
    desc: Format the project sources
    watch: true
  'format:fix':
    cmd: npx prettier --write .
    desc: Format the project sources
  'git:pre-commit':
    cmd:
      - vr lint
      - vr format
    gitHook: pre-commit
  lint:
    cmd: deno lint
    desc: Lint the project sources
  'lint:watch':
    cmd: deno lint
    desc: Lint the project sources
    watch: true
  'sonar:scan':
    desc: Run a SonarQube scan
    cmd:
      - >
        docker run --rm
        -e SONAR_HOST_URL
        -e SONAR_LOGIN
        -e SONAR_SCANNER_OPTS="-Dsonar.projectBaseDir=${PWD} -Dsonar.projectVersion=$(echo "import version from './version.ts';console.log(version)" | deno run -)"
        -v "${PWD}:${PWD}"
        sonarsource/sonar-scanner-cli
  test:
    desc: Run the tests
    cmd: deno test ./src/test
    allow:
      - net
      - read
      - env
    env:
      PORT: 8999
  'test:watch':
    desc: Run the tests in watch mode
    cmd: deno test ./src/test
    allow:
      - net
      - read
      - env
    watch: true
    env:
      PORT: 8999
  validate:
    desc: Validate the project
    cmd:
      - vr clean
      - vr lint
      - vr format:check
      - vr cover
  'validate:watch':
    desc: Validate the project in watch mode
    cmd:
      - vr clean
      - pll:
          - vr lint:watch
          - vr format:check:watch
          - vr test:watch
  'version.ts:update':
    desc: Update version.ts with the latest Git tag
    cmd: sed -i "1s/.*/const version = '$(git describe --tags --abbrev=0)'/" version.ts
